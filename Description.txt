Description for Term Project:a.	I initially would like to develop the game Doudizhu and add AI on it. The introduction of game Doudizhu in the following,It is a 3-player card game. First, randomly choose three unknown cards and keep them on the side. A shuffled pack of the rest 51 cards is dealt evenly to the three players. Randomly pick up a player now and let the player determine whether to become the landholder or not in counterclockwise (ccw) direction. Players will decide based on how confident they are with their current 17 cards. (In my programming, after analyzing all three players cards, it will choose the user with the minimum splits of cards to be landholder automatically. However, as we have three unknown cards which will be added after being the landholder. The three cards will make a big difference in the last version of splitting. Thus, it does not make sure the advantage of the landholder. It is the beauty of the game -- uncertainty which is also more and more obvious when implementing the game. For each game, the initial score is 5. One of the players is landholder while the rest two are peasants. The two peasants are playing together against with the landholder. The landlord wins if he or she has no cards left. The peasant team wins if either of the peasants has no cards left. The initial three unknown cards are then dealt to the landholder but the three cards will be shown to all the three players. (All the players know the content of the three cards.) The landholder have the first turn to give out his or her cards, then the following player in ccw direction gives out cards next.Then, the rules of giving out cards and the ranked order of them:Rank of individual card: Colored Joker > Black & White Joker > 2 > Ace (A) > King (K) > Queen (Q) > Jack (J) > 10 > 9 > 8 > 7 > 6 > 5 > 4 > 3Rocket (2 cards) - together colored Joker and black-and-white Joker, is the largest combination in the game that can beat any other cards and double the score.Bomb (4 cards) - 4 cards of the same rank, is the type of cards rank only second to the Rocket in the game. Inside bomb, it has ranks following the individual ones (e.g. 3-3-3-3 is the lowest ranking Bomb and 2-2-2-2 is the highest ranking Bomb).Except for rocket and bomb, in each turn, player should match their card corresponding the same category (number) of cards. Categories of the cards that can be given out in each turn:1. Solo: one card (e.g. J)2. Pairs: two matching cards of the same rank have the same (e.g. 2-2)3. Pair-sisters: more than three consecutive pairs (e.g. 4-4-5-5-6-6)4. Trio: three individual cards of the same rank (e.g. 6-6-6)5. Trio-with-solo: three cards of the same rank with a solo as the kicker (e.g. 4-4-4-5)6. Trio-with-pair: three cards of the same rank with a pair as the kicker (e.g. 4-4-4-5-5)7. Airplane: more than one consecutive trios (e.g. 3-3-3-4-4-4 or 3-3-3-4-4-4-5-5-5)8. Airplane-with-solo: more than one consecutive trios with each carries a distinct solo as a kicker (e.g. 3-3-3-4-4-4-5-6)9. Airplane-with-pair: more than one consecutive trios with each carries a distinct pair as a kicker (e.g. 3-3-3-4-4-4-5-5-6-6)10. Four-with-two-solos: four-of-a-kind, with two distinct solos as kickers (e.g. 3-3-3-3-4-5)11. Four-with-two-pairs: four-of-a-kind, with two distinct pairs as kickers (e.g. 3-3-3-3-4-4-5-5)12. Chain: five or more consecutively numbered cards (e.g. 3-4-5-6-7 or 3-4-5-6-7-8-...-K-A)The ranks of each category follow the rank of the individual card, judging based on the primary cards. Primary cards are the larger number of cards in each category, for instance, Trio is primary in Trio-with-solo and Tri-with-pair. As to the rule of scoring, when the game ends, if the landholder wins, then he will get the final score (Score initially set to 5, and it will be doubled during the game when rocket or bomb show.) and the two peasants will be lose half of the final score individually. Otherwise, the landholder loses the final score, and the two peasants each get half of the final score. For example, if the final score are 30 and peasants win, then each of peasants gets 15 and the landholder lose 30. b. From my expectation, I would like to find a basic developed Dou dizhu game and add my heuristic function (analyzing the cards at first, determine whether to be landholder or not, rank how much steps to give out all the cards, then assign the cards into distinct categories, etc.) I am not sure the time is good enough for me to develop all the strategies below but I will build step by step.Basic strategies - build the heuristic function - find the minimum turns to give out all the cards with as much as possible maximum score. Keep the winning as the main mission and max the score as the second mission.1. Analyze the randomly distributive cards. If I have the priority and the mini steps of giving out all of the cards is less than 6 turns (estimated for now, can be changeable for later), then decide to be the landholder. If I do not have the priority and the mini steps of giving out all of the cards is less than 5 turns (estimated for now, can be changeable for later), then decide to be the landholder. Otherwise, choose not to be the landholder. 2. If I am the person who gives out cards first, then I need to figure out the order of giving out which category. (The function here can be just assigning the values for each categories and give out them in the order of ranks. It also can be improved by judging the combination of my cards, other's people cards and the cards that are given out to change the order to give out.) If I am the person who need match my cards to the category that other people gives out, then it should dynamically change the combination and even order in the new situations. Obstacles:1. Have difficulty to finding a developed Doudizhu source code2. Not very good at giving the estimated value for a good heuristic function and choosing the which type of algorithms in the processc. I have difficulty finding a developed source code of Doudizhu game. Thus, I need to develop the game from the beginning. I built most of the rules of the Doudizhu game but it really took a lot of times. I keep the game without AI as a version called Doudizhu.py. It randomly defines one of the users as landholder and can check whether the cards given out satisfy any given types above. In addition, it can compare the grade of cards in the same type (the boom and rocket are also considered). If any boom or rocket is distributed out, the score will be doubled. The additional three card assigned to the landholder will be show every turns. For each turns, it will show the user number, his or her current cards, some hints to splitting the current cards which the user might be convenient to copy and paste to give out cards. In particular, the steps to build the game as follows,Step 1: Create a Doudizhu class and define a card list that contains all of 54 cards, a map of both cards and its corresponding grade in order to compare each combination of cards. The class has functions of shuffling cards, dealing cards to users, deciding a landholder randomly, sort card based on their grades, mapping numbers into cards, checking each types, evaluating each type’s inner grades, judging whether current cards have certain type, analyzing cards (splitting current cards into a good combination of different types based on personal standard). Step 2: Build the standard step by step:1.	Checking whether current cards contain rocket or boom, if have, extract them into a new list and remove them in the original list.2.	Checking whether current cards contain Trio, if have, exact to a new list and remove them in the original list. 3.	Checking whether contains airplane in the Trios. If have, exact to a new list and remove them in the original list. 4.	Checking Chain, expand them to the longest one. If have, exact to a new list and remove them in the original list. 5.	Include Trios (exclude airplane) in the original list and check the chain again. If have, exact to the chain list and remove them in the original list. 6.	Find all the pairs and solos in the rest of cards and assigned them to Trio to form Trio-solo and Trio-pair. Then, the splitting finishes!7.	Actually, it should add a step before 6 to find whether it has pair sisters. If I have more time, I will add the standard in.Step 3: Build the input/output. If I have more time, I would like to add GUI.Step 4: Add a simple AI of the landholder view. Since peasant team need to consider damage inside team, it will be more complex than the landholder view.  I will build if I have more time or someone else will extend it. I just add a simple greedy algorithm for the landholder AI. I assign each card type with a value, and hash them inside each card type. Then, checking the values of combinations in the splits and choose the least value to give out if landholder have the priority to give out cards. For beating cards that given by other players, it will find whether the player have the corresponding cards in the same type and have a bigger grade to beat it, if it has, then giving out. If not, find whether a boom or rocket can beat. (Actually, here is not a good strategy to give out boom or rocket anytime when we cannot found cards in the same type to beat. It should judge the situation, e.g. the number of cards of the other players and his or her own current cards. I will revise this part if I have more time). Result: The two versions of codes work for now! The game Doudizhu.py is more robust than the version with AI. I have two folders Game1_pic_without_AI and Game1_pic_without_AI, in which contains screenshots of two complete games process under the same dictionary. As for the game two, the folder includes two subsets, one is the normal game and the other is for hidden AI’s line. The two subsets are named explicitly. The programming is not perfect but leave room for improving. Although the result is not quite meet my initial expectation, as I initial would like to spend more time in developing AI rather than the game itself, I still learn a brunch of staff in the whole process including designing the structure, building a game and developing a simple AI. Conclusion: The game have a lot of fun because of the uncertainty. Even if I have the priority to give out one type of card initially, I cannot predict whether the other players can beat it or not. If they can beat, can I beat their card or give out the priority? Originally, I would like to build a minimax tree on the game but I find that the number of card types and three players make things more complex than expectation. Due to time limited, I choose the greedy algorithm rather than the dynamic algorithm to make life easy. Regardless, we can play the game now even without GUI. With the help of simple AI to split cards into combination of different types, player can play in text easier. The game itself is interesting! A simple landholder AI also works. d. If I have more time, I would like to add several things. Those things can be mainly divided into two parts.1. Things about the game itself:I.	Modify the code to make the game in a loop. Add a main menu to ask whether players would like to begin another game and get accumulative points.II.	Add the process of deciding to be landholder. Since the time is limited, I omit the process that players can be free to choose whether they want to be a landholder. Instead, I randomly choose one player. If I have more times, I would like to randomly pick one player to have the priority to become the landholder but the chosen player can give up the priority to the next player if he or she feel unconfident with his or her cards. Also, in each time that a player chooses to be the landholder, the score will be doubled. Thus, for example, the original score is five. If the player has the priority choose to be the landholder, the score now is ten. If the next player also chooses to become the landholder, the score now is twenty. If the third player does not want to be the landholder, the score keep the same, twenty. However, at this time, the player has the priority at first will have another opportunity to confirm whether he or she indeed want to be the landholder. If the player confirms to be the landholder, then the score will be forty. If not, the score keep the same; the second player becomes the landholder. It is a very fun process as people always change their original mind after seeing other players’ behavior. III.	Add a GUI for the game.2. Things about the AII.	I am exploring using the dynamic algorithm to analyze the direction of game for each step. For example, after getting a good splitting of current cards, we can predict different cases based on choosing which one in the split as the last give out. Then, from the last step to analyze each step previous. It is difficult to predict the other players’ behaviors, as I do not know whether they can beat my cards and I can beat their cards. Thus, it will be a real deep tree at the beginning while all the players have many cards. For each node, the state is the number of cards of three players, and the value should be backtracked from the leaf to the root. To make up, it could be a simple level AI at first turns and create the tree for the last several turns. II.	As we still do not know the form of best AI, genetic programming is possible to be explored here. III.	There could be many experience strategies to develop the AI. For example, when we searching for chains in the current cards. We can first to check whether it contains seven or ten. In the situation of lack of seven, we can avoid searching for 3-4-5-6-7, or 4-5-6-7-8,etc, and only start form 8-9-10-J-Q, which can improve the efficiency. The same for the absent of ten. In addition, we can predict the how the other players can beat the cards that I give out based on looking at my current cards and counting the card given out. For example, if I have a Trio of Q, Pair of K, A, 2. Then, I would know the other players could only beat my Trio of Q by boom or rocket. If at the same time, I have at least one card ranging from 3 to blackJoker, then I l know that after giving out Trio of Q, I will still have a priority to give out other cards. The same idea for judging pair sister, airplane, and chain. Taking a second instance here, if I have a boom of four seven, then the probability that people will have more solos because they cannot form a small-grade chain.e. Doudizhu is a quite interesting cards game with a lot of uncertainty. Due to many different types of cards, the same set of cards can be split into distinct combinations. Probability is beautiful and it will change the situation quickly in each turn. The program develops a completed Doudizhu game and provides some AI to analyze and help player to make decision to give out cards for each turn. You also can choose a landholder-AI version to complete with computer. Have fun to play with it!